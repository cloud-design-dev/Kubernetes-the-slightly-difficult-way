---
- name: Configure control plane nodes
  gather_facts: true
  hosts: controllers
  vars:
    - GITHUB_URL: "https://github.com/etcd-io/etcd/releases/download"
    - ETCD_VERSION: "v3.5.9"
    - K8S_VERSION: "v0.27.6"
  tasks:
    - name: Enumerate all control nodes within the hosts file
      ansible.builtin.blockinfile:
        dest: /etc/hosts
        marker: "# {mark} ANSIBLE MANAGED: k8s controller hosts"
        content: |
          {% for host in groups['controllers'] %}
          {{ hostvars[inventory_hostname].ansible_default_ipv4.address }} {{ hostvars[inventory_hostname].ansible_hostname }}
          {% endfor %}
          {% for host in groups['workers'] %}
          {{ hostvars[inventory_hostname].ansible_default_ipv4.address }} {{ hostvars[inventory_hostname].ansible_hostname }}
          {% endfor %}
      when:
        - inventory_hostname in groups['controllers']

    - name: "Copy files for apiserver, controller, scheduler to controller nodes"
      ansible.builtin.copy:
        src: "../../030-certificate-authority/{{ cert_file }}"
        dest: /root/{{ cert_file }}
        owner: root
        group: root
        mode: "0600"
      loop:
        - ca.pem
        - ca-key.pem
        - kubernetes-key.pem
        - kubernetes.pem
        - service-account-key.pem
        - service-account.pem
        - admin.kubeconfig
        - kube-controller-manager.kubeconfig
        - kube-scheduler.kubeconfig
      loop_control:
        loop_var: cert_file
      when: inventory_hostname in groups['controllers']
    - name: "Copy data encryption file to controller nodes"
      ansible.builtin.copy:
        src: "../encryption-config.yaml"
        dest: /root/encryption-config.yaml
        owner: root
        group: root
        mode: "0600"
    - name: "Update system packages on control nodes"
      ansible.builtin.apt:
        update_cache: true
      register: apt_status
      until: apt_status is success
      delay: 30
      retries: 10
      when: ansible_facts['os_family'] == "Debian"
    - name: "Download etcd binary"
      ansible.builtin.get_url:
        url: "{{ GITHUB_URL }}/{{ ETCD_VERSION }}/etcd-{{ ETCD_VERSION }}-linux-amd64.tar.gz"
        dest: /tmp/etcd-{{ ETCD_VERSION }}-linux-amd64.tar.gz
        mode: "0644"
    - name: Unarchive etcd to tmp
      ansible.builtin.unarchive:
        src: "/tmp/etcd-{{ ETCD_VERSION }}-linux-amd64.tar.gz"
        dest: "/tmp/"
        remote_src: true
    - name: "Copy etcd binaries to path"
      ansible.builtin.copy:
        src: "/tmp/etcd-{{ ETCD_VERSION }}-linux-amd64/{{ etcd_file }}"
        dest: /usr/local/bin/{{ etcd_file }}
        owner: root
        group: root
        mode: "0755"
        remote_src: true
      loop:
        - etcd
        - etcdctl
        - etcdutl
      loop_control:
        loop_var: etcd_file
    - name: "Create etcd and kubernetes directories"
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: "0700"
      loop:
        - /etc/etcd
        - /var/lib/etcd
        - /var/lib/kubernetes/
# Template the etcd systemd unit file
    - name: "Copy etcd required certificates and keys"
      ansible.builtin.copy:
        src: "/root/{{ cert_file }}"
        dest: /etc/etcd/{{ cert_file }}
        owner: root
        group: root
        mode: "0600"
        remote_src: true
      loop:
        - ca.pem
        - ca-key.pem
        - kubernetes-key.pem
        - kubernetes.pem
      loop_control:
        loop_var: cert_file
    - name: "Download kubernetes binaries"
      ansible.builtin.get_url:
        url: https://storage.googleapis.com/kubernetes-release/release/{{ K8S_VERSION }}/bin/linux/amd64/{{ binary_file }}
        dest: /usr/local/bin/{{ binary_file }}
        owner: root
        group: root
        mode: "0755"
      loop:
        - kube-apiserver
        - kube-controller-manager
        - kube-scheduler
        - kubectl
      loop_control:
        loop_var: binary_file
    - name: "Copy kubernetes config files to path"
      ansible.builtin.copy:
        src: /root/{{ k8s_config_file }}
        dest: /var/lib/kubernetes/{{ k8s_config_file }}
        owner: root
        group: root
        mode: "0600"
      loop:
        - ca.pem
        - ca-key.pem
        - kubernetes-key.pem
        - kubernetes.pem
        - service-account-key.pem
        - service-account.pem
        - encryption-config.yaml
        - kube-controller-manager.kubeconfig
        - kube-scheduler.kubeconfig
      loop_control:
        loop_var: k8s_config_file
# https://github.com/kelseyhightower/kubernetes-the-hard-way/blob/master/docs/08-bootstrapping-kubernetes-controllers.md#enable-http-health-checks