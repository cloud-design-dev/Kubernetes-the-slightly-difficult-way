---
- name: 'Copy files to worker nodes'
  gather_facts: true
  hosts: workers
  tasks:
    - name: Enumerate all worker nodes within the hosts file
      ansible.builtin.blockinfile:
        dest: /etc/hosts
        marker: "# {mark} ANSIBLE MANAGED: k8s controller hosts"
        content: |
          {% for host in groups['controllers'] %}
          {{ hostvars[inventory_hostname].ansible_default_ipv4.address }} {{ hostvars[inventory_hostname].ansible_hostname }}
          {% endfor %}
          {% for host in groups['workers'] %}
          {{ hostvars[inventory_hostname].ansible_default_ipv4.address }} {{ hostvars[inventory_hostname].ansible_hostname }}
          {% endfor %}
      when:
        - inventory_hostname in groups['workers']

    - name: Copy worker certs
      ansible.builtin.copy:
        src: "../../030-certificate-authority/{{ inventory_hostname }}.pem"
        dest: "/root/{{ inventory_hostname }}.pem"
        owner: root
        group: root
        mode: "0600"
      loop: "{{ groups['workers'] }}"
    - name: Copy worker keys
      ansible.builtin.copy:
        src: "../../030-certificate-authority/{{ inventory_hostname }}-key.pem"
        dest: "/root/{{ inventory_hostname }}-key.pem"
        owner: root
        group: root
        mode: "0600"
      loop: "{{ groups['workers'] }}"
    - name: Copy worker kubeconfig
      ansible.builtin.copy:
        src: "../../030-certificate-authority/{{ inventory_hostname }}.kubeconfig"
        dest: "/root/{{ inventory_hostname }}.kubeconfig"
        owner: root
        group: root
        mode: "0600"
      loop: "{{ groups['workers'] }}"
    - name: Copy worker kubeconfig
      ansible.builtin.copy:
        src: "../../030-certificate-authority/kube-proxy.kubeconfig"
        dest: "/root/kube-proxy.kubeconfig"
        owner: root
        group: root
        mode: "0600"
      loop: "{{ groups['workers'] }}"
    - name: Copy worker certificate authority
      ansible.builtin.copy:
        src: "../../030-certificate-authority/ca.pem"
        dest: "/root/ca.pem"
        owner: root
        group: root
        mode: "0600"
    - name: "Install required apt packages"
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
        update_cache: true
      loop:
        - socat
        - conntrack
        - ipset
# Disable swap
# swapoff -a
# Download other container runtime components: (NEED TO PULL LATEST VERSIONS)
#   https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.21.0/crictl-v1.21.0-linux-amd64.tar.gz \
  # https://github.com/opencontainers/runc/releases/download/v1.0.0-rc93/runc.amd64 \
  # https://github.com/containernetworking/plugins/releases/download/v0.9.1/cni-plugins-linux-amd64-v0.9.1.tgz \
  # https://github.com/containerd/containerd/releases/download/v1.4.4/containerd-1.4.4-linux-amd64.tar.gz \
    - name: "Download kubernetes binaries"
      ansible.builtin.get_url:
        url: https://storage.googleapis.com/kubernetes-release/release/{{ K8S_VERSION }}/bin/linux/amd64/{{ binary_file }}
        dest: /usr/local/bin/{{ binary_file }}
        owner: root
        group: root
        mode: "0755"
      loop:
        - kube-proxy
        - kubelet
        - kubectl
      loop_control:
        loop_var: binary_file
    - name: "Create kubernetes directories"
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: "0700"
      loop:
        - /etc/cni/net.d
        - /opt/cni/bin
        - /var/lib/kubelet
        - /var/lib/kube-proxy
        - /var/lib/kubernetes
        - /var/run/kubernetes
        - /root/containerd
# extract crictl-v1.21.0-linux-amd64.tar.gz
# tar -xvf crictl-v1.21.0-linux-amd64.tar.gz -C /usr/local/bin/
# extract runc.amd64
# mv runc.amd64 runc
# chmod +x crictl kubectl kube-proxy kubelet runc
# mv crictl kubectl kube-proxy kubelet runc /usr/local/bin/
# extract cni-plugins-linux-amd64-v0.9.1.tgz
# tar -xvf cni-plugins-linux-amd64-v0.9.1.tgz -C /opt/cni/bin/
# extract containerd-1.4.4-linux-amd64.tar.gz
# tar -xvf containerd-1.4.4-linux-amd64.tar.gz -C /root/containerd/
# mv /root/containerd/bin/* /bin/


# https://github.com/kelseyhightower/kubernetes-the-hard-way/blob/master/docs/09-bootstrapping-kubernetes-workers.md#configure-cni-networking
# Needs to be templated because it uses a per system pod CIDR

# ansible.builtin.blockinfile:
# cat <<EOF | sudo tee /etc/cni/net.d/99-loopback.conf
# {
#     "cniVersion": "0.4.0",
#     "name": "lo",
#     "type": "loopback"
# }
# EOF