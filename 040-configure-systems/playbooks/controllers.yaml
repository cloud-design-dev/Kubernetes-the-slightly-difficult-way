---
- name: Configure control plane nodes
  gather_facts: true
  hosts: controllers
  vars_files:
    - vars.yml
  vars:
    - GITHUB_URL: "https://github.com/etcd-io/etcd/releases/download"
    - ETCD_VERSION: "v3.5.9"
    - K8S_VERSION: "v1.27.6"
    - SOURCE_PATH: "../../030-certificate-authority"
    - FILES_PATH: "../files"
    - TEMPLATES_PATH: "../templates"
  tasks:
## System Tasks
    - name: Enumerate all control nodes within the hosts file
      ansible.builtin.blockinfile:
        dest: /etc/hosts
        marker: "# {mark} ANSIBLE MANAGED: Kubernetes hosts"
        content: |
          {% for host in groups['controllers'] %}
          {{ hostvars[inventory_hostname].ansible_default_ipv4.address }} {{ hostvars[inventory_hostname].ansible_hostname }}
          {% endfor %}
          {% for host in groups['workers'] %}
          {{ hostvars[inventory_hostname].ansible_default_ipv4.address }} {{ hostvars[inventory_hostname].ansible_hostname }}
          {% endfor %}
      when:
        - inventory_hostname in groups['controllers']

    - name: "Update system packages on control nodes"
      ansible.builtin.apt:
        update_cache: true
      register: apt_status
      until: apt_status is success
      delay: 30
      retries: 10
      when: ansible_facts['os_family'] == "Debian"

## Etcd Tasks
    - name: "Download etcd binary"
      ansible.builtin.get_url:
        url: "{{ GITHUB_URL }}/{{ ETCD_VERSION }}/etcd-{{ ETCD_VERSION }}-linux-amd64.tar.gz"
        dest: /tmp/etcd-{{ ETCD_VERSION }}-linux-amd64.tar.gz
        mode: "0644"

    - name: Unarchive etcd to tmp
      ansible.builtin.unarchive:
        src: "/tmp/etcd-{{ ETCD_VERSION }}-linux-amd64.tar.gz"
        dest: "/tmp/"
        remote_src: true

    - name: "Copy etcd binaries to path"
      ansible.builtin.copy:
        src: "/tmp/etcd-{{ ETCD_VERSION }}-linux-amd64/{{ etcd_file }}"
        dest: /usr/local/bin/{{ etcd_file }}
        owner: root
        group: root
        mode: "0755"
        remote_src: true
      loop:
        - etcd
        - etcdctl
        - etcdutl
      loop_control:
        loop_var: etcd_file

    - name: "Create etcd directories"
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: "0700"
      loop:
        - /etc/etcd
        - /var/lib/etcd

    - name: Create etcd systemd unit file
      ansible.builtin.template:
        src: "{{ TEMPLATES_PATH }}/etcd.service.j2"
        dest: /etc/systemd/system/etcd.service
        trim_blocks: true
        mode: "0644"

    - name: "Copy etcd required certificates and keys"
      ansible.builtin.copy:
        src: "{{ SOURCE_PATH }}/{{ cert_file }}"
        dest: /etc/etcd/{{ cert_file }}
        owner: root
        group: root
        mode: "0600"
      loop:
        - ca.pem
        - kubernetes-key.pem
        - kubernetes.pem
      loop_control:
        loop_var: cert_file

    - name: "Set the ETCDCTL_API environment variable to 3"
      ansible.builtin.lineinfile:
        path: /etc/profile
        line: export ETCDCTL_API=3
        state: present
        create: true
        insertafter: EOF
        mode: "0644"

    - name: "Reload systemd daemon and start etcd service"
      ansible.builtin.systemd:
        state: started
        enabled: true
        daemon_reload: true
        name: etcd

    # - name: "Check etcd member status"
    #   ansible.builtin.command: >-
    #     "/usr/local/bin/etcdctl member list --endpoints=https://127.0.0.1:2379 --cacert=/etc/etcd/ca.pem --cert=/etc/etcd/kubernetes.pem --key=/etc/etcd/kubernetes-key.pem"
    #   register: etcd_members
    #   changed_when: etcd_members.rc != 0

    # - name: Verify member status
    #   ansible.builtin.assert:
    #     that: "{{ item.1 | trim == 'started' }}"
    #   when: inventory_hostname == groups['controllers'][0]
    #   loop: "{{ etcd_members.stdout_lines | map('split', ',') | list }}"
    #   register: etcd_status

## Kubernetes Tasks
    - name: "Download kubernetes binaries"
      ansible.builtin.get_url:
        url: https://storage.googleapis.com/kubernetes-release/release/{{ K8S_VERSION }}/bin/linux/amd64/{{ binary_file }}
        dest: /usr/local/bin/{{ binary_file }}
        owner: root
        group: root
        mode: "0755"
      loop:
        - kube-apiserver
        - kube-controller-manager
        - kube-scheduler
        - kubectl
      loop_control:
        loop_var: binary_file

    - name: "Create kubernetes directories"
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: "0700"
      loop:
        - /var/lib/kubernetes/
        - /etc/kubernetes/config

    - name: "Copy CA, Kubernetes, and Service Account certificates and keys to /var/lib/kubernetes/"
      ansible.builtin.copy:
        src: "{{ SOURCE_PATH }}/{{ cert_file }}"
        dest: /var/lib/kubernetes/{{ cert_file }}
        owner: root
        group: root
        mode: "0600"
      loop:
        - ca.pem
        - ca-key.pem
        - kubernetes-key.pem
        - kubernetes.pem
        - service-account-key.pem
        - service-account.pem
        - encryption-config.yaml
        - kube-controller-manager.kubeconfig
        - kube-scheduler.kubeconfig
      loop_control:
        loop_var: cert_file

    - name: Template kube-apiserver systemd unit file
      ansible.builtin.template:
        src: "{{ TEMPLATES_PATH }}/kube-apiserver.service.j2"
        dest: /etc/systemd/system/kube-apiserver.service
        trim_blocks: true
        mode: "0644"

    - name: "Copy kube-controller-manager service file"
      ansible.builtin.copy:
        src: "{{ FILES_PATH }}/kube-controller-manager.service"
        dest: /etc/systemd/system/kube-controller-manager.service
        owner: root
        group: root
        mode: "0644"

    - name: "Copy kube-scheduler configuration file"
      ansible.builtin.copy:
        src: "{{ FILES_PATH }}/kube-scheduler.yaml"
        dest: /etc/kubernetes/config/kube-scheduler.yaml
        owner: root
        group: root
        mode: "0644"

    - name: "Copy kube-scheduler systemd unit file"
      ansible.builtin.copy:
        src: "{{ FILES_PATH }}/kube-scheduler.service"
        dest: /etc/systemd/system/kube-scheduler.service
        owner: root
        group: root
        mode: "0644"

    - name: "Reload systemd daemon and start kube-apiserver service"
      ansible.builtin.systemd:
        state: started
        enabled: true
        daemon_reload: true
        name: kube-apiserver
      register: kube_apiserver_status

    - name: "Enable and start kube-scheduler service"
      ansible.builtin.systemd:
        state: started
        enabled: true
        name: kube-scheduler
      register: kube_scheduler_status

    - name: "Enable and start kube-controller-manager service"
      ansible.builtin.systemd:
        state: started
        enabled: true
        name: kube-controller-manager
      register: kube_controller_status

    - name: "Copy RBAC configuration files"
      ansible.builtin.copy:
        src: "{{ FILES_PATH }}/rbac-config.yaml"
        dest: /root/rbac-config.yaml
        owner: root
        group: root
        mode: "0600"

    - name: "Copy Admin kubeconfig file"
      ansible.builtin.copy:
        src: "{{ SOURCE_PATH }}/admin.kubeconfig"
        dest: /root/admin.kubeconfig
        owner: root
        group: root
        mode: "0600"

    - name: "Create RBAC configuration"
      ansible.builtin.command: "kubectl apply --kubeconfig /root/admin.kubeconfig -f /root/rbac-config.yaml"
      register: rbac_status
      changed_when: rbac_status.rc != 0
